generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Users{
  userId Int @id @default(autoincrement()) @map("userId")
  email     String  @unique @map("email")
  nickname  String  @map("nickname")
  password  String  @map("password")
  createdAt DateTime @default(now()) @map("createdAt")
  updatedAt DateTime @updatedAt @map("updatedAt")

  userinfos  UserInfos?
  bookings  Bookings[]
  reviews  Reviews[]

  @@map("Users")
}

model UserInfos{
  userinfoId Int @id @default(autoincrement()) @map("userinfoId")
  UserId    Int @unique @map("UserId")
  name     String  @map("name")
  gender   Gender  @map("gender")
  age   Int?  @map("age")
  profileImage   String?  @map("profileImage")
  createdAt DateTime @default(now()) @map("createdAt")
  updatedAt DateTime @updatedAt @map("updatedAt")

  User Users @relation(fields: [UserId], references: [userId], onDelete : Cascade)

  @@map("UserInfos")
}

model Petsitter{
  sitterId Int @id @default(autoincrement()) @map("sitterId")
  name     String  @unique @map("name")
  career  Int  @map("career")
  createdAt DateTime @default(now()) @map("createdAt")
  updatedAt DateTime @updatedAt @map("updatedAt")

  bookings  Bookings[]
  likes  Likes?

  @@map("Petsitter")
}

model Bookings{
  bookingId Int @id @default(autoincrement()) @map("bookingId")
  UserId    Int?     @map("UserId")
  SitterId    Int     @map("SitterId")
  title     String  @map("title")
  content   String  @db.Text() @map("content")
  bookedAt DateTime @map("bookedAt")
  createdAt DateTime @default(now()) @map("createdAt")
  updatedAt DateTime @updatedAt @map("updatedAt")

  User Users? @relation(fields: [UserId], references: [userId], onDelete : SetNull)
  petsitter Petsitter @relation(fields: [SitterId], references: [sitterId], onDelete : Cascade)

  reviews  Reviews[]

  @@map("Bookings")
}

model Reviews{
  reviewId Int @id @default(autoincrement()) @map("reviewId")
  UserId    Int?     @map("UserId")
  BookingId    Int  @map("BookingId")
  review   String  @db.Text() @map("review")
  star   Int  @map("star")
  createdAt DateTime @default(now()) @map("createdAt")
  updatedAt DateTime @updatedAt @map("updatedAt")

  User Users? @relation(fields: [UserId], references: [userId], onDelete : SetNull)
  Booking Bookings @relation(fields: [BookingId], references: [bookingId], onDelete : Cascade)

  @@map("Reviews")
}

model Likes{
  likeId Int @id @default(autoincrement()) @map("likeId")
  SitterId    Int @unique  @map("SitterId")
  count   Int @default(0)  @map("count")
  createdAt DateTime @default(now()) @map("createdAt")
  updatedAt DateTime @updatedAt @map("updatedAt")

  Petsitter Petsitter @relation(fields: [SitterId], references: [sitterId], onDelete : Cascade)

  @@map("Likes")
}

enum Status {
  FOR_SALE
  SOLD_OUT
}

enum Gender {
  M
  W
}
