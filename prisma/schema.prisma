generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model users{
  userId Int @id @default(autoincrement()) @map("userId")
  email     String  @unique @map("email")
  nickname  String  @map("nickname")
  password  String  @map("password")
  createdAt DateTime @default(now()) @map("createdAt")
  updatedAt DateTime @updatedAt @map("updatedAt")

  userinfos  userInfos?
  bookings  bookings[]
  reviews  reviews[]

  @@map("users")
}

model userInfos{
  userinfoId Int @id @default(autoincrement()) @map("userinfoId")
  userId    Int @unique @map("userId")
  name     String  @map("name")
  gender   Gender  @map("gender")
  age   Int?  @map("age")
  profileImage   String?  @map("profileImage")
  createdAt DateTime @default(now()) @map("createdAt")
  updatedAt DateTime @updatedAt @map("updatedAt")

  users users @relation(fields: [userId], references: [userId], onDelete : Cascade)

  @@map("userInfos")
}

model petsitters{
  sitterId Int @id @default(autoincrement()) @map("sitterId")
  name     String  @map("name")
  career  Int  @map("career")
  createdAt DateTime @default(now()) @map("createdAt")
  updatedAt DateTime @updatedAt @map("updatedAt")

  bookings  bookings[]
  likes  likes[]

  @@map("petsitters")
}

model bookings{
  bookingId Int @id @default(autoincrement()) @map("bookingId")
  userId    Int?     @map("userId")
  sitterId    Int     @map("sitterId")
  title     String  @map("title")
  content   String  @db.Text() @map("content")
  bookedAt DateTime @db.Date @map("bookedAt")
  createdAt DateTime @default(now()) @map("createdAt")
  updatedAt DateTime @updatedAt @map("updatedAt")

  users users? @relation(fields: [userId], references: [userId], onDelete : SetNull)
  petsitters petsitters @relation(fields: [sitterId], references: [sitterId], onDelete : Cascade)

  reviews  reviews[]

  @@map("bookings")
}

model reviews{
  reviewId Int @id @default(autoincrement()) @map("reviewId")
  userId    Int?     @map("userId")
  bookingId    Int  @map("bookingId")
  review   String  @db.Text() @map("review")
  star   Int  @map("star")
  createdAt DateTime @default(now()) @map("createdAt")
  updatedAt DateTime @updatedAt @map("updatedAt")

  users users? @relation(fields: [userId], references: [userId], onDelete : SetNull)
  bookings bookings @relation(fields: [bookingId], references: [bookingId], onDelete : Cascade)

  @@map("reviews")
}

model likes{
  likeId Int @id @default(autoincrement()) @map("likeId")
  sitterId    Int   @map("sitterId")
  count   Int @default(0)  @map("count")
  createdAt DateTime @default(now()) @map("createdAt")
  updatedAt DateTime @updatedAt @map("updatedAt")

  petsitters petsitters @relation(fields: [sitterId], references: [sitterId], onDelete : Cascade)

  @@map("likes")
}

enum Status {
  FOR_SALE
  SOLD_OUT
}

enum Gender {
  M
  W
}
