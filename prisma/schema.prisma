generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Users{
  userId Int @id @default(autoincrement()) @map("userId")
  email     String  @unique @map("email")
  nickname  String  @map("nickname")
  password  String  @map("password")
  createdAt DateTime @default(now()) @map("createdAt")
  updatedAt DateTime @updatedAt @map("updatedAt")

  userinfos  UserInfos?
  posts  Posts[]
  comments  Comments[]

  @@map("Users")
}

model UserInfos{
  userinfoId Int @id @default(autoincrement()) @map("userinfoId")
  UserId    Int @unique @map("UserId")
  name     String  @map("name")
  gender   Gender  @map("gender")
  age   Int?  @map("age")
  profileImage   String?  @map("profileImage")
  createdAt DateTime @default(now()) @map("createdAt")
  updatedAt DateTime @updatedAt @map("updatedAt")

  User Users @relation(fields: [UserId], references: [userId], onDelete : Cascade)

  @@map("UserInfos")
}

model Posts{
  postId Int @id @default(autoincrement()) @map("postId")
  UserId    Int?     @map("UserId")
  title     String  @map("title")
  content   String  @db.Text() @map("content")
  createdAt DateTime @default(now()) @map("createdAt")
  updatedAt DateTime @updatedAt @map("updatedAt")

  User Users? @relation(fields: [UserId], references: [userId], onDelete : SetNull)

  comments  Comments[]
  likes  Likes?

  @@map("Posts")
}

model Comments{
  commentId Int @id @default(autoincrement()) @map("commentId")
  UserId    Int?     @map("UserId")
  PostId    Int  @map("PostId")
  comment   String  @map("comment")
  createdAt DateTime @default(now()) @map("createdAt")
  updatedAt DateTime @updatedAt @map("updatedAt")

  User Users? @relation(fields: [UserId], references: [userId], onDelete : SetNull)
  Post Posts @relation(fields: [PostId], references: [postId], onDelete : Cascade)

  @@map("Comments")
}

model Likes{
  likeId Int @id @default(autoincrement()) @map("likeId")
  PostId    Int @unique  @map("PostId")
  count   Int @default(0)  @map("count")
  createdAt DateTime @default(now()) @map("createdAt")
  updatedAt DateTime @updatedAt @map("updatedAt")

  Post Posts @relation(fields: [PostId], references: [postId], onDelete : Cascade)

  @@map("Likes")
}

enum Status {
  FOR_SALE
  SOLD_OUT
}

enum Gender {
  M
  W
}
